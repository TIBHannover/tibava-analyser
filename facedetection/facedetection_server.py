from concurrent import futures
from facedetector import RetinaFaceDetector
import grpc
import imageio
import logging
import os
import traceback
import yaml

import facedetection_pb2  # autogenerated file from grpc
import facedetection_pb2_grpc  # autogenerated file from grpc

# read config
_CUR_PATH = os.path.dirname(__file__)
with open(os.path.join(_CUR_PATH, "config.yml")) as f:
    _CFG = yaml.load(f, Loader=yaml.FullLoader)

# init logging
logging.basicConfig(format="%(asctime)s %(levelname)s:%(message)s", datefmt="%Y-%m-%d %H:%M:%S", level=logging.INFO)


class FaceDetector(facedetection_pb2_grpc.FaceDetectorServicer):
    def __init__(self):
        # initialize facedetector with default model R50 and gpuid=-1
        # set gpuid >= 0 to use GPU
        gpuid = -1
        self.FaceDetector = RetinaFaceDetector(gpuid=gpuid)

        # setup media directory
        if not os.path.exists(_CFG["media_folder"]):
            os.makedirs(os.path.join(_CUR_PATH, _CFG["media_folder"]))

    def detect_faces(self, request, context):
        # create video path from video id
        video_path = os.path.join(_CFG["media_folder"], request.video_id + ".mp4")
        logging.info(f"Detect faces in: {video_path}")

        try:
            # read video
            vid_reader = imageio.get_reader(video_path)
            faces = []
            max_num_faces = 0

            # detect faces and return via grpc
            for frame_idx, frame_img in enumerate(vid_reader):

                if frame_idx % 100 == 0:
                    logging.info(f"{frame_idx} frames processed ...")

                frame_faces = self.FaceDetector.detect_faces(frame_img)
                frame_faces = sorted(frame_faces, key=lambda k: k["bbox_area"], reverse=True)

                for face in frame_faces:
                    faces.append(
                        facedetection_pb2.Face(
                            frame_idx=frame_idx,
                            bbox_x=face["bbox_x"],
                            bbox_y=face["bbox_y"],
                            bbox_w=face["bbox_w"],
                            bbox_h=face["bbox_h"],
                            bbox_area=face["bbox_area"],
                        )
                    )

                num_faces = len(frame_faces)
                if num_faces > max_num_faces:
                    max_num_faces = num_faces

            logging.info("DONE!")
            return facedetection_pb2.FaceResponse(success=True, faces=faces, max_num_faces=max_num_faces)

        except Exception as e:
            logging.error(f"detect_faces: {repr(e)}")
            logging.error(traceback.format_exc())

        return facedetection_pb2.FaceResponse(success=False, faces=[], max_num_faces=0)


def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    facedetection_pb2_grpc.add_FaceDetectorServicer_to_server(FaceDetector(), server)
    server.add_insecure_port("[::]:" + str(_CFG["grpc_port"]))
    server.start()
    server.wait_for_termination()


if __name__ == "__main__":
    logging.basicConfig()
    serve()

